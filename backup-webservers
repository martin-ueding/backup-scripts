#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright Â© 2013 Martin Ueding <dev@martin-ueding.de>

import argparse
import configparser
import os.path
import subprocess
import threading

__docformat__ = "restructuredtext en"

class Worker(threading.Thread):
    def __init__(self, **kwargs):
        super().__init__()
        self.options = kwargs

    def run(self):
        command = ["backup-webserver"]

        for key, flag in [
            ("dumpsite", "d"),
            ("name", "n"),
            ("passwd", "p"),
            ("server", "s"),
            ("subfolder", "f"),
            ("user", "u"),
        ]:
            if key in self.options:
                command += ["-"+flag, self.options[key]]

        print(" ".join(command))
        subprocess.check_call(command)

def main():
    options = _parse_args()

    configfile = os.path.expanduser("~/.config/backup-scripts/webservers.ini")
    configfile_alt = "webservers.ini"

    config = configparser.ConfigParser()
    config.read([configfile, configfile_alt])

    workers = []

    for section in config.sections():
        opts = {key: val for key, val in config.items(section)}
        opts["name"] = section
        workers.append(Worker(**opts))

    for worker in workers:
        worker.start()

    for worker in workers:
        worker.join()

def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(description="")
    #parser.add_argument("args", metavar="N", type=str, nargs="*", help="Positional arguments.")
    #parser.add_argument("", dest="", type="", default=, help=)
    #parser.add_argument("--version", action="version", version="<the version>")

    return parser.parse_args()


if __name__ == "__main__":
    main()
