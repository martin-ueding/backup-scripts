#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2014 Martin Ueding <dev@martin-ueding.de>

import argparse
import datetime
import logging
import os
import os.path
import re
import subprocess
import tempfile
import termcolor

# Directories with PDF files that should be copied onto the device.
pdfdirs = [
    "Dokumente/2012-LaTeX_Kurs",
    "Dokumente/2013-LaTeX_Kurs_VWL/Kursunterlagen",
    "Dokumente/Anleitungen",
    "Dokumente/Aufsaetze/Brandon_Patrick_In_Space",
    "Dokumente/Informationen",
    "Dokumente/Nachhilfe",
    "Dokumente/Physik_Dokumente",
    "Dokumente/Schule/Abizeitung/Abizeitung-300.pdf",
    "Dokumente/Spektrum",
]

studium_pdf_dirs = [
    "Dokumente/Studium/EBooks",
    "Dokumente/Studium/Modulhandbücher",
    "Dokumente/Studium/physics606",
    "Dokumente/Studium/physik321",
    "Dokumente/Studium/physik412",
    "Dokumente/Studium/physik421",
    "Dokumente/Studium/physik511",
    "Dokumente/Studium/physik521",
]

backupdirs=[
    "Dokumente/Studium",
]

# Folders where data will build up on the device.
bins=[
    "DCIM/100ANDRO",
    "DCIM/Camera",
    "Download",
    "Pictures/Screenshots",
    "TODO",
]

__docformat__ = "restructuredtext en"

class Target(object):
    def __init__(self, basepath, ip=None, backup=True, music=True):
        self.basepath = basepath
        self.ssh = False
        self.backup = backup
        self.music = music

        if ip is not None:
            self.ip = ip
            self.user = 'root'
            self.ssh = True

    def path_to(self, suffix):
        if self.ssh:
            return os.path.join('{user}@{ip}:{basepath}'.format(user=self.user, ip=self.ip, basepath=self.basepath), suffix)
        else:
            return os.path.join(self.basepath, suffix)

    def delete_bin_contents(self, bin):
        if self.ssh:
            command = ['ssh', '{}@{}'.format(self.user, self.ip), 'rm -rf /sdcard/{bin}/* /sdcard/{bin}/.??*'.format(bin=bin)]
            logging.debug('Deletion command: %s', command)
            subprocess.check_call(command)
        else:
            bin_path = self.path_to(bin)
            logging.debug('Path to bin: %s', bin_path)
            contents = os.listdir(bin_path)
            for file in contents:
                path = os.path.join(bin_path, file)
                logging.debug('Deleting %s', path)
                os.remove(path)

    def get_hostname(self):
        tmp = tempfile.mkstemp()[1]
        rsync([self.path_to('hostname.txt')], tmp)
        with open(tmp) as f:
            return f.read()

def copy_backupdirs(backupdirs, target):
    termcolor.cprint('Copy Backupdirs', 'cyan')
    for backupdir in backupdirs:
        target_folder = os.path.dirname(backupdir)
        target_path = target.path_to(target_folder) + '/'

        rsync([os.path.join(os.path.expanduser('~'), backupdir)], target_path, ['--delete'])

def copy_bins(bins, dropfolder, target):
    termcolor.cprint('Copy Bins', 'cyan')
    for bin in bins:
        try:
            logging.info('Copying bin %s to computer', bin)
            rsync([target.path_to(bin)], dropfolder)
            target.delete_bin_contents(bin)
        except FileNotFoundError:
            logging.error('Bin “%s” does not exist.', bin)


def copy_music(target):
    termcolor.cprint('Copy Music', 'cyan')
    source = os.path.expanduser("~/.cache/mp3_packer/128") + os.path.expanduser('~/Musik/Musik/')
    flags = ['--exclude-from', os.path.expanduser("~/.config/backup-scripts/handy_musik.txt")]
    rsync([source], target.path_to('Music'), flags)

def rsync(sources, target_path, additional_flags=[]):
    flags = ['--progress', '-h', '-l', '-m', '-r', '-v', '--size-only', '--ignore-errors', '--exclude=.thumbnails', '--copy-links'] + additional_flags
    command = ['rsync'] + flags + sources + [target_path]
    logging.info('rsync command: %s', ' '.join(command))
    subprocess.check_call(command)

def copy_reading_list(target):
    termcolor.cprint('Copy Reading List', 'cyan')
    source = os.path.expanduser("~/Leseliste/")
    rsync([source], target.path_to('Leseliste/'), ['--delete', '--max-size=1G'])

def copy_wohnungsunterlagen(target):
    termcolor.cprint('Copy Wohnungsunterlagen', 'cyan')
    source = os.path.expanduser("~/Dokumente/Wohnung_Monschauer_Strasse")
    rsync([source], target.path_to('Dokumente/'), ['--delete', '--max-size=1G'])

def copy_studium_pdf_dirs(target):
    termcolor.cprint('Copy Studium PDF dirs', 'cyan')

    with tempfile.NamedTemporaryFile() as tmp:
        sourcefiles = subprocess.check_output(['find'] + studium_pdf_dirs + ['-type', 'f', '-name', '*.pdf'])
        logging.debug('Sourcefiles: %s', sourcefiles.decode())
        tmp.write(sourcefiles)
        tmp.flush()

        rsync([os.path.expanduser('~')], target.path_to('') + '/', ['--files-from='+tmp.name])


def sync_device(target):
    now = datetime.datetime.now()
    prefix = 'android-sync-python_{year:d}-{month:02d}-{day:02d}_{hour:02d}-{minute:02d}-{second:02d}-'.format(
        year=now.year,
        month=now.month,
        day=now.day,
        hour=now.hour,
        minute=now.minute,
        second=now.second,
    )
    tempdir = tempfile.mkdtemp(prefix=prefix, dir=os.path.expanduser('~/TODO'))

    try:
        copy_bins(bins, tempdir, target)
        if target.backup:
            copy_backupdirs(backupdirs, target)
        else:
            copy_studium_pdf_dirs(target)
        if target.music:
            copy_music(target)

        copy_reading_list(target)

    except:
        raise
    finally:
        tempdir_contents = os.listdir(tempdir)
        logging.debug('Contents of temporary directory: %s', tempdir_contents)
        if len(tempdir_contents) == 0:
            logging.info('Deleting temporary directory')
            os.rmdir(tempdir)

def main():
    options = _parse_args()

    os.chdir(os.path.expanduser('~'))

    target_testing = Target(os.path.expanduser('~/android-sync-testing'))
    target_manta = Target('/sdcard', ip='192.168.0.11', backup=False, music=False)
    target_mango = Target('/media/mu/9016-4EF8')

    sync_device(target_manta)


def _parse_args():
    """
    Parses the command line arguments.

    If the logging module is imported, set the level according to the number of
    ``-v`` given on the command line.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(description="")
    #parser.add_argument("args", metavar="N", type=str, nargs="*", help="Positional arguments.")
    #parser.add_argument("", dest="", type="", default=, help=)
    #parser.add_argument("--version", action="version", version="<the version>")
    parser.add_argument("-v", dest='verbose', action="count", help='Enable verbose output. Can be supplied multiple times for even more verbosity.')

    options = parser.parse_args()

    # Try to set the logging level in case the logging module is imported.
    if options.verbose == 1:
        logging.basicConfig(level=logging.INFO)
    elif options.verbose == 2:
        logging.basicConfig(level=logging.DEBUG)

    return options

if __name__ == "__main__":
    main()
