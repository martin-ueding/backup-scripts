#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2014 Martin Ueding <dev@martin-ueding.de>

import argparse
import os.path
import os
import subprocess
import logging
import tempfile
import termcolor
import re

# Directories with PDF files that should be copied onto the device.
pdfdirs = [
    "Dokumente/2012-LaTeX_Kurs",
    "Dokumente/2013-LaTeX_Kurs_VWL/Kursunterlagen",
    "Dokumente/Anleitungen",
    "Dokumente/Aufsaetze/Brandon_Patrick_In_Space",
    "Dokumente/Informationen",
    "Dokumente/Nachhilfe",
    "Dokumente/Physik_Dokumente",
    "Dokumente/Schule/Abizeitung/Abizeitung-300.pdf",
    "Dokumente/Spektrum",
]

studium_pdf_dirs = [
    "Dokumente/Studium/EBooks",
    "Dokumente/Studium/Modulhandbücher",
    "Dokumente/Studium/physics606",
    "Dokumente/Studium/physik321",
    "Dokumente/Studium/physik412",
    "Dokumente/Studium/physik421",
    "Dokumente/Studium/physik511",
    "Dokumente/Studium/physik521",
]

backupdirs=[
    "Dokumente/Studium",
]

# Folders where data will build up on the device.
bins=[
    "DCIM/100ANDRO",
    "DCIM/Camera",
    "Download",
    "Pictures/Screenshots",
    "TODO",
]

__docformat__ = "restructuredtext en"

class Target(object):
    def __init__(self, basepath, **kwargs):
        self.basepath = basepath
        self.ssh = False

        if "ip" in kwargs:
            self.ip = kwargs['ip']
            self.user = root
            self.ssh = True

    def path_to(self, suffix):
        if self.ssh:
            return os.path.join('{user}@{ip}:{basepath}'.format(user=self.user, ip=self.ip, basepath=self.basepath), suffix)
        else:
            return os.path.join(self.basepath, suffix)

    def delete_bin_contents(self, bin):
        if self.ssh:
            command = ['ssh', '{}@{}'.format(self.user, self.ip), 'rm -rf /sdcard/{bin}/* /sdcard/{bin}/.??*'.format(bin=bin)]
            logging.debug('Deletion command: %s', command)
            subprocess.check_call(command)
        else:
            bin_path = self.path_to(bin)
            logging.debug('Path to bin: %s', bin_path)
            contents = os.listdir(bin_path)
            for file in contents:
                path = os.path.join(bin_path, file)
                logging.debug('Deleting %s', path)
                shutil.rmtree(path)


def copy_backupdirs(backupdirs, target):
    for backupdir in backupdirs:
        from_base = re.sub(r'^/home/\w+/', '', backupdir)
        target_folder = os.path.dirname(from_base)
        target_path = target.path_to(target_folder) + '/'

        rsync([backupdir], target_path, ['--delete'])

def copy_bins(bins, dropfolder, target):
    for bin in bins:
        try:
            logging.info('Copying bin %s to computer', bin)
            rsync([target.path_to(bin)], dropfolder)
            target.delete_bin_contents(bin)
        except FileNotFoundError:
            logging.error('Bin “%s” does not exist.', bin)


def copy_music(target):
    source = os.path.expanduser("~/.cache/mp3_packer/128") + os.path.expanduser('~/Musik/Musik/')
    flags = ['--exclude-from', os.path.expanduser("~/.config/backup-scripts/handy_musik.txt")]
    rsync([source], target.path_to('Music'), flags)

def rsync(sources, target_path, additional_flags=[]):
    flags = ['--progress', '-h', '-l', '-m', '-r', '-v', '--size-only', '--ignore-errors', '--exclude=.thumbnails', '--copy-links'] + additional_flags
    command = ['rsync'] + flags + sources + [target_path]
    logging.info('rsync command: %s', ' '.join(command))
    #subprocess.check_call(command)

def copy_reading_list(target):
    pass

def main():
    options = _parse_args()

    tempdir = tempfile.mkdtemp(prefix='android-sync-python', dir=os.path.expanduser('~/TODO'))

    target = Target(os.path.expanduser('~/android-sync-testing'))

    try:
        termcolor.cprint('Copy Bins', 'cyan')
        copy_bins(bins, tempdir, target)
        termcolor.cprint('Copy Backupdirs', 'cyan')
        copy_backupdirs(backupdirs, target)
        termcolor.cprint('Copy Music', 'cyan')
        copy_music(target)

    except:
        raise
    finally:
        tempdir_contents = os.listdir(tempdir)
        logging.debug('Contents of temporary directory: %s', tempdir_contents)
        if len(tempdir_contents) == 0:
            logging.info('Deleting temporary directory')
            os.rmdir(tempdir)

def _parse_args():
    """
    Parses the command line arguments.

    If the logging module is imported, set the level according to the number of
    ``-v`` given on the command line.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(description="")
    #parser.add_argument("args", metavar="N", type=str, nargs="*", help="Positional arguments.")
    #parser.add_argument("", dest="", type="", default=, help=)
    #parser.add_argument("--version", action="version", version="<the version>")
    parser.add_argument("-v", dest='verbose', action="count", help='Enable verbose output. Can be supplied multiple times for even more verbosity.')

    options = parser.parse_args()

    # Try to set the logging level in case the logging module is imported.
    if options.verbose == 1:
        logging.basicConfig(level=logging.INFO)
    elif options.verbose == 2:
        logging.basicConfig(level=logging.DEBUG)

    return options

if __name__ == "__main__":
    main()
