#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright Â© 2011-2013 Martin Ueding <dev@martin-ueding.de>

"""
Traverses through the external drives and updates the backup on them.
"""

import colorcodes
import optparse
import os
import subprocess

__docformat__ = "restructuredtext en"

backups = [
    "MU-3-446G"
]
"""
List with backups.

:type: list
"""

_c = colorcodes.Colorcodes()

def backup(name):
    """
    Creates a backup to ``target``.

    :param name: Name of this backup.
    :type name: str
    :param target: Target directory.
    :type target: str
    """
    excludesfile = os.path.expanduser("~/.config/backup-scripts/full.exclude.txt")

    source = os.path.expanduser("~")

    target = os.path.join("/media", '{}-data'.format(name))
    heading = "Backup {}".format(name)
    print(_c.bold + heading.center(80) + _c.reset)
    print(_c.bold + ("="*len(heading)).center(80) + _c.reset)

    if not os.path.isdir(target):
        print(_c.red + "Target {} does not exist.".format(target) + _c.reset)
        return

    destdir = os.path.join(target, os.path.dirname(source))

    if os.path.exists(excludesfile):
        exclude_arg = ["--exclude-from", excludesfile]
    else:
        exclude_arg = []

    if not os.path.isdir(destdir):
        os.makedirs(destdir)

    command = ["rsync", "-avhE", "--delete", "--", os.path.expanduser("~/Dokumente/Listen/Hauptliste.kdb"), "/media/{}-info/info/".format(name)]

    try:
        subprocess.check_call(command)
    except subprocess.CalledProcessError as e:
        print(e)
    else:
        subprocess.call(["backup-status", "update", "{}-info".format(name)])

    command = ["rsync", "-avhE", "--delete", "--delete-excluded"] + exclude_arg + ["--", include, destdir]

    try:
        subprocess.check_call(command)
    except subprocess.CalledProcessError as e:
        print(e)
    else:
        subprocess.call(["backup-status", "update", "{}-data".format(name)])



def main():
    for name in backups:
        backup(name)


if __name__ == "__main__":
	main()
