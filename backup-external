#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright Â© 2011-2013 Martin Ueding <dev@martin-ueding.de>

"""
Traverses through the external drives and updates the backup on them.
"""

import optparse
import os
import subprocess

__docformat__ = "restructuredtext en"

backups = {
    "Eta": "/media/Eta-Data/Backup",
    "Gamma": "/media/Gamma/Backup",
    "Sigma": "/media/Sigma/Backup",
    "USB-Eins": "/media/USB-Eins",
    "USB-Zwei": "/media/USB-Zwei"
}
"""
List with backups.

:type: dict
"""

class Colorcodes(object):
    """
    Provides ANSI terminal color codes which are gathered via the ``tput``
    utility. That way, they are portable. If there occurs any error with
    ``tput``, all codes are initialized as an empty string.

    The provided fields are listed below.

    Control:

    - bold
    - reset

    Colors:

    - blue
    - green
    - orange
    - red

    :license: MIT
    """
    def __init__(self):
        try:
            self.bold = subprocess.check_output("tput bold".split())
            self.reset = subprocess.check_output("tput sgr0".split())

            self.blue = subprocess.check_output("tput setaf 4".split())
            self.green = subprocess.check_output("tput setaf 2".split())
            self.orange = subprocess.check_output("tput setaf 3".split())
            self.red = subprocess.check_output("tput setaf 1".split())
        except subprocess.CalledProcessError as e:
            self.bold = ""
            self.reset = ""

            self.blue = ""
            self.green = ""
            self.orange = ""
            self.red = ""

_c = Colorcodes()

def backup(name, target):
    """
    Creates a backup to ``target``.

    :param name: Name of this backup.
    :type name: str
    :param target: Target directory.
    :type target: str
    """
    includesfile = os.path.expanduser("~/.config/syncscripts/"+name+".include.txt")
    excludesfile = os.path.expanduser("~/.config/syncscripts/"+name+".exclude.txt")

    if os.path.exists(includesfile):
        with open(includesfile) as h:
            for include in h:
                include = include.strip()

                heading = "Backup {name} -- {include}".format(name=name, include=include)
                print _c.bold + heading.center(80) + _c.reset
                print _c.bold + ("="*len(heading)).center(80) + _c.reset
                destdir = target+os.path.dirname(include)

                if os.path.exists(excludesfile):
                    exclude_arg = ["--exclude-from", excludesfile]
                else:
                    exclude_arg = []

                if not os.path.isdir(destdir):
                    os.makedirs(destdir)

                command = ["rsync", "-avhE", "--delete", "--delete-excluded"] + exclude_arg + ["--", include, destdir]

                try:
                    subprocess.check_call(command)
                except subprocess.CalledProcessError as e:
                    print e
                else:
                    subprocess.call(["backup-status", "update", name])


def main():
    for name, target in backups.items():
        if os.path.exists(target):
            backup(name, target)


if __name__ == "__main__":
	main()
