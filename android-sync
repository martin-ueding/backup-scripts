#!/bin/bash
# Copyright © 2013-2014 Martin Ueding <dev@martin-ueding.de>

# Copies files onto Android devices using SSH. The devices should run the
# “SSHelper” program that provides an SSH server for Android.

set -e
set -u

shopt -s nullglob
shopt -s extglob

# Directories with PDF files that should be copied onto the device.
pdfdirs=(

"Dokumente/2012-LaTeX_Kurs"
"Dokumente/2013-LaTeX_Kurs_VWL/Kursunterlagen"
"Dokumente/Anleitungen"
"Dokumente/Aufsaetze/Brandon_Patrick_In_Space"
"Dokumente/Informationen"
"Dokumente/Nachhilfe"
"Dokumente/Physik_Dokumente"
"Dokumente/Schule/Abizeitung/Abizeitung-300.pdf"
"Dokumente/Spektrum"

)

studiumpdfdirs=(

"Dokumente/Studium/EBooks"
"Dokumente/Studium/math140"
"Dokumente/Studium/math240"
"Dokumente/Studium/math340"
"Dokumente/Studium/Modulhandbücher"
"Dokumente/Studium/physics606"
"Dokumente/Studium/physik321"
"Dokumente/Studium/physik412"
"Dokumente/Studium/physik421"
"Dokumente/Studium/physik511"
"Dokumente/Studium/physik521"

)

backupdirs=(

"Dokumente/Studium"

)

# Folders where data will build up on the device.
bins=(

"DCIM/100ANDRO"
"Download"
"Locus/export"
"Pictures/Screenshots"
"Pictures/Skitch"
"TODO"

)

# Cleanup actions.
#
# Positional arguments:
#   DROPFOLDER      bins to empty
cleanup() {
    # Delete the dropfolder, if it is empty.
    rmdir --ignore-fail-on-non-empty "$1"
}

# Copies backup folders onto the device.
#
# Options:
#   -t TARGET       target folder on device
#
# Positional arguments:
#   BACKUPDIR ...   directory with PDF files
copy-backupdirs() {
    local from
    local frombase
    local opt
    local target
    local targetfolder

    OPTIND=1
    while getopts "t:" opt
    do
        case "$opt" in
            t)
                target="$OPTARG"
                ;;
        esac
    done
    shift $((OPTIND-1))

    print-heading "copying backup files to device"

    for from
    do
        frombase="${from#/home/*/}"
        targetfolder="$target/${frombase%/*}"
        myrsync --delete "$from" "$targetfolder/"
    done
}

# Copies the contents of the bins.
#
# Options:
#   -d DROPFOLDER   folder on computer
#   -t TARGET       target folder on device
#
# Positional arguments:
#   BIN ...         bins to empty
copy-bins() {
    local bin
    local dropfolder
    local folder
    local opt
    local target

    OPTIND=1
    while getopts "d:t:" opt
    do
        case "$opt" in
            d)
                dropfolder="$OPTARG"
                ;;
            t)
                target="$OPTARG"
                ;;
        esac
    done
    shift $((OPTIND-1))

    folder="$1"

    for bin
    do
        print-heading "move $bin to computer"

        myrsync "$target/$bin/" "$dropfolder"
        ssh -p "$port" "$ip" "rm -rf /sdcard/$bin/* /sdcard/$bin/.??*"
    done
}

# Copies all the music to the device.
#
# Positional arguments:
#   TARGET          target folder
copy-music() {
    local target_music

    target_music="$1"

    print-heading "Copying MP3 files to device"

    myrsync --size-only --delete \
        --force --exclude-from "$HOME/.config/backup-scripts/handy_musik.txt" \
        "$HOME/.cache/mp3_packer/128$HOME/Musik/Musik/" \
        "$target_music/"
}

# Taken from http://android.stackexchange.com/a/58165.
find-sshelper() {
    avahi-browse --terminate --resolve --parsable _ssh._tcp \
        | grep "SSHelper.*;local;" \
        | sed -E 's/.*SSHelp.*;local;(.*.local);.*/\1/g'
}

# Gives the user access rights to all the files in the dropfolder.
#
# Apparently, the files that are copied from the device have their permissions
# preserved. Since the user ID is different, the user who calls this script
# does not have permissions on the files and folders.
#
# Positional arguments:
#   DROPFOLDER      folder on computer
fix-permissions() {
    local dropfolder="$1"

    print-heading "Fix permissions in $dropfolder"
    find "$dropfolder" -type d -exec chmod u+rwx '{}' \;
    find "$dropfolder" -type f -exec chmod u+rw '{}' \;
}

# Gathers colorcodes.
#
# It will set the variables for use within the program:
#
#     black, blue, cyan, green, orange, purple, red, white and bold, reset
gather-colorcodes() {
    if [[ -x /usr/bin/tput ]] && tput setaf 1 >&/dev/null
    then
        bold="$(tput bold)"

        black="$(tput setaf 0)"
        blue="$(tput setaf 4)"
        cyan="$(tput setaf 6)"
        green="$(tput setaf 2)"
        orange="$(tput setaf 3)"
        purple="$(tput setaf 5)"
        red="$(tput setaf 1)"
        white="$(tput setaf 7)"

        reset="$(tput sgr0)"
    else
        bold=

        black=
        blue=
        cyan=
        green=
        orange=
        purple=
        red=
        white=

        reset=
    fi
}

# Retrives the hostname from the device.
#
# Options:
#   -t TARGET       target folder
get-hostname() {
    local target
    local tempfile="$(mktemp)"

    OPTIND=1
    while getopts "t:" opt
    do
        case "$opt" in
            t)
                target="$OPTARG"
                ;;
        esac
    done
    shift $((OPTIND-1))

    myrsync "$target/hostname.txt" "$tempfile" &> /dev/null
    cat "$tempfile"
    rm -f "$tempfile"
}

# Main function of this script.
main() {
    local full_ip_regex='^ *([[:digit:]]{1,3})\.([[:digit:]]{1,3})\.([[:digit:]]{1,3})\.([[:digit:]]{1,3}) *.*$'
    local ip
    local own_ip="$(hostname -I)"
    local partial_ip_regex='^([[:digit:]]{1,3})$'
    local subnet

    cd "$HOME"

    gather-colorcodes

    if [[ "$own_ip" =~ $full_ip_regex ]]
    then
        subnet="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.${BASH_REMATCH[3]}"
    fi

    if [[ "${1:-}" =~ $full_ip_regex ]]
    then
        ip="$1"
    elif [[ "${1:-}" =~ $partial_ip_regex ]]
    then
        ip="$subnet.$1"
    elif ips="$(find-sshelper)"
    then
        echo "avahi: $ips"
        for ip in $ips
        do
            sync-device "$ip"
        done
    else
        echo $"Usage: $0 IP"
        exit 2
    fi

    if [[ -n "$ip" ]]
    then
        sync-device "$ip"
    else
        echo "No IP address found"
    fi
}

# Wrapper for rsync with all the options.
#
# Positional arguments:
#   OPTIONS         other rsync options and arguments
myrsync() {
    rsync --rsh="ssh -p $port" --progress -hlmrv --size-only --ignore-errors \
        --exclude=.thumbnails --copy-links "$@"
}

# Checks whether the given host is reachable.
#
# Positional arguments:
#   IP              IP address to check
#
# Exit status:
#   the exit status of ping
ping-test() {
    ping -c 1 -w 5 "$1" &> /dev/null
}

# Prints a colored heading.
#
# Positional arguments
#   TEXT            text to print
print-heading() {
    echo
    echo "${green}$1${reset}"
    echo
}

# Stashes the GPX files into the target directory.
#
# Positional arguments
#   DROPFOLDER      Source folder
stash-gpx-files() {
    local dropfolder="$1"
    local gpxfile

    print-heading "Move GPX files into target folder"

    shopt -s nullglob

    for gpxfile in "$dropfolder"/*.gpx
    do
        mv -v "$gpxfile" "$HOME/Dokumente/GPS/"
    done

    (
    cd "$HOME/Dokumente/GPS"
    rename 's/(\d{4})-(\d{2})-(\d{2})_\d{2}-\d{2}-\d{2}[-_](.+\.gpx)/$1$2$3-$4/' *.gpx
    )
}

# Performs the syncing. This functions pretty much calls all other functions.
#
# Positional arguments
#   IP              IP address of the device
sync-device() {
    local dropfolder
    local hostname
    local ip="$1"
    local target
    local target_music
    local target_pdf

    if ! ping-test "$ip"
    then
        echo "${red}Device is not reachable. Aborting.${reset}"
        exit 1
    fi

    port="2222"
    target="$ip:/sdcard"
    target_music="$target/Music"
    target_pdf="$target/PDF"

    dropfolder="$(mktemp -d "$HOME/TODO/android-sync-$(date +%Y%m%dT%H%M%S%z)-XXX")"

    trap "cleanup '$dropfolder'" EXIT

    hostname="$(get-hostname -t "$target")"

    echo "${bold}Syncing $hostname @ $ip${reset}"

    copy-bins -d "$dropfolder" -t "$target" "${bins[@]}"
    fix-permissions "$dropfolder"

    print-heading $"Copying reading list items onto device"
    myrsync --delete --max-size=1G "$HOME/Leseliste/" "$target/Leseliste"
    myrsync --delete --max-size=1G "$HOME/Dokumente/Wohnung_Monschauer_Strasse" "$target/Dokumente/"

    case "$hostname" in
        "Nexus 10")
            print-heading $"Copy university PDF files to device"
            myrsync --files-from=<(find "${studiumpdfdirs[@]}" -type f -name '*.pdf') "$HOME" "$target/"
            ;;
        "Xperia Mini Pro")
            copy-backupdirs -t "$target" "${backupdirs[@]}"
            copy-music "$target_music"
            ;;
    esac

    print-heading $"Copy PDF files to device"
    myrsync --files-from=<(find "${pdfdirs[@]}" -type f -name '*.pdf') "$HOME" "$target/"

    stash-gpx-files "$dropfolder"
    sync-locus-maps "$target"
    backup-status --update "$hostname"
}

# Syncs the Locus maps from and to the device.
#
# The maps are cached on the computer, so that they can be copied between the
# devices.
#
# Options:
#   -t TARGET       target folder
sync-locus-maps() {
    local cachefolder="$HOME/.cache/backup-scripts/locus-maps"
    local target="$1"

    print-heading $"Syncing Locus Maps"

    mkdir -p "$cachefolder"

    myrsync "$target/Locus/maps/" "$cachefolder"
    myrsync "$cachefolder/"* "$target/Locus/maps/"
}

main "$@"
