#!/bin/bash
# Copyright © 2013 Martin Ueding <dev@martin-ueding.de>

# Copies files onto Android devices using SSH. The devices should run the
# “SSHelper” program that provides an SSH server for Android.

set -e
set -u

shopt -s nullglob
shopt -s extglob

# Directories with PDF files that should be copied onto the device.
pdfdirs=(

"$HOME/Dokumente/2012-LaTeX_Kurs"
"$HOME/Dokumente/Anleitungen"
"$HOME/Dokumente/Aufsaetze/Brandon_Patrick_In_Space"
"$HOME/Dokumente/Informationen"
"$HOME/Dokumente/Nachhilfe"
"$HOME/Dokumente/Physik_Dokumente"
"$HOME/Dokumente/Schule/Abizeitung/Abizeitung.pdf"
"$HOME/Dokumente/Spektrum"
"$HOME/Dokumente/Studium/"Modulhandbuch_*.pdf
"$HOME/Dokumente/Studium/astro121"
"$HOME/Dokumente/Studium/astro122"
"$HOME/Dokumente/Studium/EBooks"
"$HOME/Dokumente/Studium/math140"
"$HOME/Dokumente/Studium/math240"
"$HOME/Dokumente/Studium/math340"
"$HOME/Dokumente/Studium/physik220"
"$HOME/Dokumente/Studium/physik312"
"$HOME/Dokumente/Studium/physik321"

)

# Folders where data will build up on the device.
bins=(

"DCIM"
"Download"
"Pictures/Screenshots"
"TODO"

)

# IP addresses where Android devices might be.
ips=(

192.168.0.110		# Frederike
192.168.100.{100..110}	# Home
192.168.43.1		# Hotspot created by phone

)

# Files that should be copied into the ``$HOME`` on the devices.
dotfiles=(

"$HOME/.bashrc"
"$HOME/.vimrc"

)

# Retrives the hostname from the device.
get-hostname() {
	tempfile="$(mktemp)"

	myrsync "$target/hostname.txt" "$tempfile"

	hostname="$(cat "$tempfile")"
	
	rm -f "$tempfile"
}

# Gathers colorcodes. It will set the variables for use within the program:
# black, blue, cyan, green, orange, burple, red, white and bold, reset.
gather-colorcodes() {
	if [[ -x /usr/bin/tput ]] && tput setaf 1 >&/dev/null
	then
		bold="$(tput bold)"

		black="$(tput setaf 0)"
		blue="$(tput setaf 4)"
		cyan="$(tput setaf 6)"
		green="$(tput setaf 2)"
		orange="$(tput setaf 3)"
		purple="$(tput setaf 5)"
		red="$(tput setaf 1)"
		white="$(tput setaf 7)"

		reset="$(tput sgr0)"
	else
		bold=

		black=
		blue=
		cyan=
		green=
		orange=
		purple=
		red=
		white=

		reset=
	fi
}

# Wrapper for rsync with all the options.
#
# :param: A list with more parameters for rsync.
myrsync() {
	rsync --rsh="ssh -p $port" --progress -hlmrv --size-only --ignore-errors \
		"$@"
}

# Copies a folder with PDFs to the device.
#
# :param: Folder to copy.
copy-single-pdf-folder() {
	local from="$1"
	local frombase="${from#/home/*/}"
	local target="$target_pdf/${frombase%/*}"

	echo "${cyan}Folder $from to $target${reset}"

	ssh -p "$port" "$ip" "mkdir -p \"${target#*:}\""
	myrsync --delete --include='*.pdf' --include='*/' --exclude='*' \
		"$from" "$target/"

	echo
}

# Moves a given folder to the dropfolder.
#
# :param: Folder on the remote device.
move-to-computer() {
	folder="$1"

	print-heading "move $folder to computer"

	myrsync -b "$target/$folder/" "$dropfolder"
	ssh -p 2222 "$ip" "rm -frv /sdcard/$folder/*"
}

# Prints a colored heading.
#
# :param: Heading text.
print-heading() {
	echo
	echo "${green}$1${reset}"
	echo
}

# Prints a colored “NEXUS” banner.
print-nexus() {
	cat <<<EOF
	│╲   │  ┌──  ${blue}╲  ${red}╱${reset}  │   │  ╱──
	│ ╲  │  │__   ${blue}╲${red}╱${reset}   │   │  ╲__
	│  ╲ │  │     ${orange}╱${green}╲${reset}   │   │     ╲
	│   ╲│  └── ${orange} ╱  ${green}╲${reset}  └───┘   __╱
	EOF
}

# Checks whether the given host is reachable.
#
# :returns: the exit status of ping
ping-test() {
	ping -c 1 -w 1 "$ip" &> /dev/null
}

# Copies dotfiles to the remote device.
copy-dotfiles() {
	myrsync "${dotfiles[@]}" "$target/"
}

# copies PDF files to the device using ``copy-single-pdf-folder``.
copy-pdffiles() {
	print-heading "copying PDF files to device"
	for pdfdir in "${pdfdirs[@]}"
	do
		copy-single-pdf-folder "$pdfdir"
	done
}

# Copies the contents of the bins using ``move-to-computer``.
copy-bins() {
	for bin in "${bins[@]}"
	do
		move-to-computer "$bin"
	done
}

# Copies all the music to the device.
copy-music() {
	print-heading "Copying MP3 files to device"
	myrsync --delete --max-size 15M \
		--force --exclude-from "/home/mu/.config/syncscripts/handy_musik.txt" \
		"/home/mu/.cache/mp3_packer/128/home/mu/Musik/Musik/" "$target_music/"
}

# Gives the user access rights to all the files in the dropfolder. Apparently,
# the files that are copied from the device have their permissions preserved.
# Since the user ID is different, the user who calls this script does not have
# permissions on the files and folders.
fix-permissions() {
	print-heading "Fix permissions in $dropfolder"
	find "$dropfolder" -type d -exec chmod u+rwx '{}' \;
	find "$dropfolder" -type f -exec chmod u+rw '{}' \;
}

# Performs the syncing. This functions pretty much calls all other functions.
sync-device() {
	if ! ping-test
	then
		echo "${red}Device is not reachable. Aborting.${reset}"
		return
	fi

	port="2222"
	target="$ip:/sdcard"
	target_music="$target/Music"
	target_pdf="$target/PDF"

	dropfolder="$HOME/TODO"

	get-hostname &> /dev/null

	echo "${bold}Syncing $hostname @ $ip${reset}"

	copy-bins
	copy-dotfiles
	copy-pdffiles
	copy-music

	fix-permissions

	backup-status update "$hostname"
}

gather-colorcodes

if [[ -n "${1:-}" ]]
then
	ip="$1"
	sync-device
else
	for ip in "${ips[@]}"
	do
		if ! sync-device
		then
			echo "Failed."
		fi
	done
fi
