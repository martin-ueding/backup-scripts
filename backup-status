#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (c) 2011 Martin Ueding <dev@martin-ueding.de>

import datetime
import dateutil.parser
import json
import optparse
import os

def pretty(status):
    status = sorted(status, key=lambda backup: backup["last"])

    col_dir = 3
    col_name = 30
    col_last = 30
    col_diff = 15


    print "Dir".ljust(col_dir), "Name".ljust(col_name), "Last".ljust(col_last), "Difference".ljust(col_diff)

    for s in status:
        if "type" in s:
            if s["type"] == "to":
                direction = "->"
            elif s["type"] == "from":
                direction = "<-"
            else:
                direction = "??"
        else:
            direction = "??"

        name = s["name"]
        last = s["last"]
        last_date = dateutil.parser.parse(last)
        difference = datetime.datetime.now() - last_date

        print direction.ljust(col_dir), name.ljust(col_name), str(last_date).ljust(col_last), str(difference).ljust(col_diff)

def main():
    parser = optparse.OptionParser(usage="", description="")
    #parser.add_option("", dest="", type="", default=, help=)

    (options, args) = parser.parse_args()
    del parser


    statusfile = os.path.expanduser("~/.syncscripts/backup-status.js")

    # Open the already existing file
    if os.path.exists(statusfile):
        with open(statusfile, "r") as f:
            status = json.loads(f.read())
    else:
        status = []


    if len(args) >= 2:
        if args[0] == 'update':
            backup = args[1]


            if not backup in [x["name"] for x in status]:
                status.append({"name": backup})

            for s in status:
                if not s["name"] == backup:
                    continue

                s["last"] = str(datetime.datetime.now())
                
                if len(args) >= 3:
                    s["type"] = args[2]

    else:
        pretty(status)


    with open(statusfile, "w") as f:
        f.write(json.dumps(status))


if __name__ == "__main__":
	main()
