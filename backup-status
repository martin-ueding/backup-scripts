#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (c) 2011 Martin Ueding <dev@martin-ueding.de>

import datetime
import dateutil.parser
import json
import optparse
import os

import prettytable

def pretty(status, direction_filter):
    """
    Pretty format the backup status.

    @param status: List with status dicts.
    @type status: dict
    """
    status = sorted(status, key=lambda backup: backup["last"])

    data = []

    for s in status:
        if "type" in s:
            if s["type"] == "to":
                if direction_filter is not None and direction_filter != "to":
                    continue
                direction = "->"
            elif s["type"] == "from":
                if direction_filter is not None and direction_filter != "from":
                    continue
                direction = "<-"
            else:
                direction = "??"
        else:
            direction = "??"

        name = s["name"]
        last = s["last"]
        last_date = dateutil.parser.parse(last)
        difference = datetime.datetime.now() - last_date

        data.append([direction, name, last_date, difference])

    if len(data) > 0:
        prettytable.print_table(["Dir", "Name", "Last", "Difference"], data)


def main():
    parser = optparse.OptionParser(usage="", description="")
    #parser.add_option("", dest="", type="", default=, help=)

    (options, args) = parser.parse_args()
    del parser

    if len(args) > 0:
        direction_filter = args[0]
    else:
        direction_filter = None

    changed = False


    statusfile = os.path.expanduser("~/.local/share/syncscripts/backup-status.js")

    # Open the already existing file
    if os.path.exists(statusfile):
        with open(statusfile, "r") as f:
            status = json.loads(f.read())
    else:
        status = []


    if len(args) >= 2:
        if args[0] == 'update':
            backup = args[1]


            if not backup in [x["name"] for x in status]:
                status.append({"name": backup})

            for s in status:
                if not s["name"] == backup:
                    continue

                s["last"] = str(datetime.datetime.now())
                changed = True
                
                if len(args) >= 3:
                    s["type"] = args[2]

    else:
        pretty(status, direction_filter)


    if changed:
        with open(statusfile, "w") as f:
            f.write(json.dumps(status, sort_keys=True, indent=4))


if __name__ == "__main__":
	main()
